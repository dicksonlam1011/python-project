import datetime
import os
import operator

ppm_sharefolder_path="//dc7shdns02b/CSC1/TEAMFOLDER/PPM"
# month_path=input("Please enter the PPM Month folder (eg: 2021_12): \n")
# ppm_folder=input("Please enter the PPM Folder Name (eg: 2021-S0492(K2)): \n")
month_path="2021_12"
ppm_folder="2021-S0492(K2)"
mypath="{}/{}/{}".format(ppm_sharefolder_path, month_path, ppm_folder)


# check sybase sql header script name
def checkSybaseHeader():
    # get sql file list
    sql_file_list = []
    for (dirpath, subdirs, files) in os.walk(mypath):
        for x in files:
            if x.endswith((".sql",".ppm",".aat",".pps",".prd")):
                sql_file_list.append(os.path.join(dirpath, x))

    # File Name List
    sql_filename_list = []
    for (dirpath, subdirs, files) in os.walk(mypath):
        for x in files:
            if x.endswith((".sql",".ppm",".aat",".pps",".prd")):
                sql_filename_list.append(x)

    # Check if the script name and header are matched
    for sql_file in sql_file_list:
        for header_to_search in sql_filename_list:
            with open(sql_file, 'r', encoding="utf-8") as file:
                file = file.read()
            if header_to_search in file:
                print("{}: Pass".format(header_to_search))
            else:
                print("{}: Failed !!!".format(header_to_search))
        break


# check sybase syntax with "GO" issue
def checkSybaseBasicSyntax(string_to_search_1, string_to_search_2):

    # get sql file list
    sql_file_list = []
    for (dirpath, subdirs, files) in os.walk(mypath):
        for x in files:
            if x.endswith((".sql",".ppm",".aat",".pps",".prd")):
                sql_file_list.append(os.path.join(dirpath, x))
            # print(SQLfiles)
    
    for sql_file in sql_file_list:
        with open(sql_file, 'r', encoding="utf-8") as file:
            file = file.read()
            # print(file)
            if (string_to_search_1 in file) or (string_to_search_2 in file):
                print("{}: Pass".format(sql_file))
            else:
                print("{}: Failed !!!".format(sql_file))

# checkSybaseBasicSyntax()


# check sybase sql if the db and the table are matched
def checkSybaseDBandTable(string_to_search_1, string_to_search_2):

    sql_file_list = []
    for (dirpath, subdirs, files) in os.walk(mypath):
        for x in files:
            if x.endswith((".sql",".ppm",".aat",".pps",".prd")):
                sql_file_list.append(os.path.join(dirpath, x))
            # print(SQLfiles)

    for sql_file in sql_file_list:
        with open(sql_file, 'r', encoding="utf-8") as file:
            file = file.read()
            # print(file)
            if (string_to_search_1 in file) and (string_to_search_2 in file):
                print("{}: Pass".format(sql_file))
            else:
                print("{}: Failed !!!".format(sql_file))


def checkSybaseHospcode(string_to_search_1, string_to_search_2):
    # Check "_imp-corp-db_" is in the file path
    sql_file_list = []
    for (dirpath, subdirs, files) in os.walk(mypath):
        for x in files:
            # if operator.contains(x, "imp-corp-db"):
            if x.endswith((".sql",".ppm",".aat",".pps",".prd")) and (string_to_search_1 in dirpath):
                sql_file_list.append(os.path.join(dirpath, x))
    # print(sql_file_list)

    # Check "imp-corp-db" have "hospcode"
    for sql_file in sql_file_list:
        with open(sql_file, 'r', encoding="utf-8") as file:
            file = file.read()
            # print(file)
            if (string_to_search_1 in sql_file) and (string_to_search_2 in file):
                print("{}: Pass".format(sql_file))
            else:
                print("{}: Failed !!!".format(sql_file))



def checkSybaseManualScript():
    manual_type="_manual_"
    imp_manual_type="_imp-manual_"

    # get sql file list
    sql_file_list = []
    for (dirpath, subdirs, files) in os.walk(mypath):
        for x in files:
            if x.endswith((".sql",".ppm",".aat",".pps",".prd")):
                sql_file_list.append(os.path.join(dirpath, x))
    
    # check if the path is manual/ imp-manual
    for sql_file in sql_file_list:
        if (manual_type in sql_file) or (imp_manual_type in sql_file):
            print("It is manual scripts")
        else:
            print("NOT manual scripts")


        








    




